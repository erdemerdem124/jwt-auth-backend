"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-r3&+3rzus#c_&w&#+(orej92g^=y8*de$@ju!zmm-=gpd(cebv')# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['.onrender.com', 'localhost', '127.0.0.1']

# ==============================================================================
# BÜTÜN ALLAUTH VE SİTE AYARLARI BURADA BAŞLAR
# Bu ayarların INSTALLED_APPS'tan önce gelmesi, bazı modüllerin doğru yüklenmesi için önemlidir.
# ==============================================================================

SITE_ID = 1 # allauth için gereklidir

# Kullanıcı Model Ayarı - CustomUser modelimizi kullanacağımızı belirtiyoruz
AUTH_USER_MODEL = 'users.CustomUser'

# Django-Allauth Ayarları
ACCOUNT_LOGIN_METHODS = ['email'] # <-- YENİ KULLANIMI BUDUR, BU SATIRI EKLEYİN
# ACCOUNT_EMAIL_REQUIRED = True # EmailField üzerinde zaten required True olduğu için bu varsayılan olarak zaten doğru
ACCOUNT_UNIQUE_EMAIL = True # Her e-postanın benzersiz olmasını sağlar
ACCOUNT_CONFIRM_EMAIL_ON_CHANGE = True # E-posta değiştirildiğinde yeniden doğrulama ister
ACCOUNT_EMAIL_VERIFICATION = 'none' # GEÇİCİ OLARAK 'none' yaptım, e-posta doğrulaması olmadan giriş yapabilmek için.
ACCOUNT_ALLOW_REGISTRATION = True                      # Sorun çözülünce 'mandatory' yapabilirsiniz.
ACCOUNT_USERNAME_REQUIRED = False # Kullanıcı adı zorunlu olmaz - KRİTİK AYAR!
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # Kullanıcı adı alanı yerine e-postayı kullanır
# ACCOUNT_EMAIL_VARIFICATION = 'optional' # İsteğe bağlı e-posta doğrulaması. 'mandatory' de olabilir.

# CustomRegisterSerializer artık allauth'un SignupForm'unu doğrudan kullanmadığı için
# ACCOUNT_SIGNUP_FIELDS ayarının burada doğrudan bir etkisi kalmadı,
# ama eğer allauth'un kendi formlarını kullanmak isterseniz yine de burada tanımlı kalabilir.
# ACCOUNT_SIGNUP_FIELDS = ['email', 'first_name', 'last_name', 'phone_number']

# Başarısız giriş denemeleri için hız sınırlaması
ACCOUNT_RATE_LIMITS = {
    'login_failed': '5/5m', # 5 dakikada 5 başarısız giriş denemesi
}

# Allauth için özel adaptörümüzü belirtiyoruz
ACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter' 

# E-posta Gönderme Ayarları (Geliştirme Ortamı İçin Basit Ayarlar)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# ==============================================================================
# ALLAUTH VE SİTE AYARLARI BURADA BİTER
# ==============================================================================


# Application definition
INSTALLED_APPS = [
    'whitenoise.runserver_nostatic', # BU SATIRI EN ÜSTE EKLEYİN
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Kendi uygulamalarımız ve paketlerimiz
    'users',
    'corsheaders',
    'rest_framework',
    'phonenumber_field',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    # 'rest_framework.authtoken', # JWT kullanıyorsak bu genellikle gerekmez
    'rest_framework.authtoken', # <-- BU SATIRI TEKRAR AKTİF HALE GETİRİN
    'django.contrib.sites', # allauth için gereklidir
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth',
    'dj_rest_auth.registration', # dj-rest-auth'un kayıt view'ı için
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # BU SATIRI EKLEYİN
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # allauth için middleware
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL'), # Render bu ortam değişkenini otomatik sağlar
        conn_max_age=600, # Bağlantı ömrü
        ssl_require=True # SSL bağlantısı gerektir
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # BU SATIRI EKLEYİN
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # BU SATIRI EKLEYİN



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

CORS_ALLOW_CREDENTIALS = True

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# ==============================================================================
# dj-rest-auth Ayarları (TÜM SERİALIZER AYARLARI BURADA OLMALI)
# ==============================================================================
REST_AUTH = {
    'USE_JWT': True, 
    'JWT_AUTH_HTTPONLY': False, 
    'OLD_PASSWORD_FIELD_ENABLED': True,
    'LOGOUT_ON_PASSWORD_CHANGE': True,
    'JWT_AUTH_COOKIE': 'access_token',
    'JWT_AUTH_REFRESH_COOKIE': 'refresh_token',
    
    # Kendi özel serializer'larımızı dj-rest-auth'a bildiriyoruz
    'LOGIN_SERIALIZER': 'users.serializers.LoginSerializer', # <-- Burası önemliydi!
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
    # Eğer şifre sıfırlama vs. için de özel serializer'lar kullanacaksanız buraya eklemelisiniz.
}

# dj-rest-auth'un varsayılan token modelini kullanmadığımızı belirtiriz (JWT kullandığımız için)
REST_AUTH_TOKEN_MODEL = None 
# Eski (veya fazlalık) olabilecek ayar, yukarıdaki REST_AUTH içinde belirttik.
# REST_AUTH_REGISTER_SERIALIZERS = {
#     'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
# }